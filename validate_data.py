#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de validation pour les donn√©es du portail SIG Boundou
V√©rifie la structure et la coh√©rence des fichiers de donn√©es externes
"""

import json
import os
import sys
from pathlib import Path

def validate_geojson(filepath):
    """Valide la structure du fichier GeoJSON"""
    print(f"üó∫Ô∏è  Validation du fichier GeoJSON: {filepath}")
    
    if not os.path.exists(filepath):
        print(f"‚ùå Fichier non trouv√©: {filepath}")
        return False, []
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur JSON: {e}")
        return False, []
    except Exception as e:
        print(f"‚ùå Erreur de lecture: {e}")
        return False, []
    
    # V√©rifier la structure GeoJSON
    if data.get('type') != 'FeatureCollection':
        print(f"‚ùå Type incorrect: attendu 'FeatureCollection', trouv√© '{data.get('type')}'")
        return False, []
    
    features = data.get('features', [])
    if not features:
        print("‚ùå Aucune feature trouv√©e")
        return False, []
    
    commune_names = []
    for i, feature in enumerate(features):
        properties = feature.get('properties', {})
        
        # Identifier le nom de la commune
        commune_name = properties.get('CCRCA_1') or properties.get('CCRCA') or properties.get('NOM')
        if commune_name:
            commune_names.append(commune_name)
        else:
            print(f"‚ö†Ô∏è  Feature {i}: nom de commune non trouv√© (champs CCRCA_1, CCRCA, NOM)")
        
        # V√©rifier la g√©om√©trie
        geometry = feature.get('geometry')
        if not geometry or not geometry.get('coordinates'):
            print(f"‚ö†Ô∏è  Feature {i}: g√©om√©trie manquante")
    
    print(f"‚úÖ {len(features)} communes trouv√©es dans le GeoJSON")
    print(f"üìã Communes: {', '.join(sorted(set(commune_names)))}")
    return True, commune_names

def validate_parcelles(filepath):
    """Valide la structure du fichier parcelles.json"""
    print(f"\nüì¶ Validation du fichier parcelles: {filepath}")
    
    if not os.path.exists(filepath):
        print(f"‚ùå Fichier non trouv√©: {filepath}")
        return False, []
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur JSON: {e}")
        return False, []
    except Exception as e:
        print(f"‚ùå Erreur de lecture: {e}")
        return False, []
    
    # V√©rifier que c'est un array
    if not isinstance(data, list):
        print(f"‚ùå Format incorrect: attendu un array, trouv√© {type(data).__name__}")
        return False, []
    
    if not data:
        print("‚ùå Aucune parcelle trouv√©e")
        return False, []
    
    # Champs obligatoires
    required_fields = ['id_parcelle', 'commune', 'nicad', 'deliberee', 'type_usag']
    commune_names = []
    stats = {
        'total': len(data),
        'nicad_oui': 0,
        'deliberee_oui': 0,
        'superficie_total': 0,
        'types_usage': {},
        'communes': {}
    }
    
    for i, parcelle in enumerate(data):
        if not isinstance(parcelle, dict):
            print(f"‚ùå Parcelle {i}: format incorrect, attendu un objet")
            continue
        
        # V√©rifier les champs obligatoires
        missing_fields = [field for field in required_fields if field not in parcelle]
        if missing_fields:
            print(f"‚ö†Ô∏è  Parcelle {i}: champs manquants: {', '.join(missing_fields)}")
        
        # R√©cup√©rer le nom de la commune
        commune = parcelle.get('commune')
        if commune:
            commune_names.append(commune)
            stats['communes'][commune] = stats['communes'].get(commune, 0) + 1
        
        # Statistiques
        if parcelle.get('nicad') == 'Oui':
            stats['nicad_oui'] += 1
        
        if parcelle.get('deliberee') == 'Oui':
            stats['deliberee_oui'] += 1
        
        superficie = parcelle.get('superficie')
        if superficie is not None:
            try:
                stats['superficie_total'] += float(superficie)
            except (ValueError, TypeError):
                pass
        
        type_usage = parcelle.get('type_usag')
        if type_usage:
            stats['types_usage'][type_usage] = stats['types_usage'].get(type_usage, 0) + 1
    
    print(f"‚úÖ {stats['total']} parcelles trouv√©es")
    print(f"üìä Statistiques:")
    print(f"   ‚Ä¢ NICAD: {stats['nicad_oui']}/{stats['total']} ({stats['nicad_oui']/stats['total']*100:.1f}%)")
    print(f"   ‚Ä¢ D√©lib√©r√©es: {stats['deliberee_oui']}/{stats['total']} ({stats['deliberee_oui']/stats['total']*100:.1f}%)")
    print(f"   ‚Ä¢ Superficie totale: {stats['superficie_total']:.1f} ha")
    print(f"   ‚Ä¢ Types d'usage: {len(stats['types_usage'])}")
    print(f"   ‚Ä¢ Communes: {len(stats['communes'])}")
    
    return True, commune_names

def check_commune_consistency(geojson_communes, parcelles_communes):
    """V√©rifie la coh√©rence des noms de communes"""
    print(f"\nüîç V√©rification de la coh√©rence des communes")
    
    geojson_set = set(geojson_communes)
    parcelles_set = set(parcelles_communes)
    
    # Communes dans GeoJSON mais pas dans parcelles
    missing_in_parcelles = geojson_set - parcelles_set
    if missing_in_parcelles:
        print(f"‚ö†Ô∏è  Communes dans GeoJSON mais sans parcelles: {', '.join(sorted(missing_in_parcelles))}")
    
    # Communes dans parcelles mais pas dans GeoJSON
    missing_in_geojson = parcelles_set - geojson_set
    if missing_in_geojson:
        print(f"‚ùå Communes dans parcelles mais pas dans GeoJSON: {', '.join(sorted(missing_in_geojson))}")
        print("   ‚ö†Ô∏è  Ces parcelles ne s'afficheront pas sur la carte!")
    
    # Communes communes
    common = geojson_set & parcelles_set
    if common:
        print(f"‚úÖ Communes avec donn√©es compl√®tes: {', '.join(sorted(common))}")
    
    return len(missing_in_geojson) == 0

def validate_project_structure():
    """V√©rifie la structure du projet"""
    print(f"\nüìÅ V√©rification de la structure du projet")
    
    required_files = [
        'index.html',
        'app.js', 
        'style.css',
        'data/communes_boundou.geojson',
        'data/parcelles.json'
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
        else:
            print(f"‚úÖ {file_path}")
    
    if missing_files:
        print(f"‚ùå Fichiers manquants:")
        for file_path in missing_files:
            print(f"   ‚Ä¢ {file_path}")
        return False
    
    return True

def main():
    """Fonction principale"""
    print("üöÄ Validation des donn√©es du portail SIG Boundou")
    print("=" * 50)
    
    # V√©rifier la structure du projet
    if not validate_project_structure():
        print("\n‚ùå Structure du projet incorrecte")
        return False
    
    # Valider le GeoJSON
    geojson_valid, geojson_communes = validate_geojson('data/communes_boundou.geojson')
    
    # Valider les parcelles
    parcelles_valid, parcelles_communes = validate_parcelles('data/parcelles.json')
    
    # V√©rifier la coh√©rence
    consistent = True
    if geojson_valid and parcelles_valid:
        consistent = check_commune_consistency(geojson_communes, parcelles_communes)
    
    # R√©sum√©
    print(f"\nüìã R√©sum√© de la validation")
    print("=" * 30)
    print(f"GeoJSON: {'‚úÖ Valide' if geojson_valid else '‚ùå Erreur'}")
    print(f"Parcelles: {'‚úÖ Valide' if parcelles_valid else '‚ùå Erreur'}")
    print(f"Coh√©rence: {'‚úÖ OK' if consistent else '‚ùå Probl√®me'}")
    
    if geojson_valid and parcelles_valid and consistent:
        print(f"\nüéâ Validation r√©ussie! Le portail peut utiliser vos donn√©es.")
        print(f"\nPour lancer le portail:")
        print(f"  python -m http.server 8000")
        print(f"  Puis ouvrez http://localhost:8000")
        return True
    else:
        print(f"\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s. Veuillez les corriger avant de d√©ployer.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
